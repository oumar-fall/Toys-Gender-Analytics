[
  {
    "tabname" : "Shape Detection",
    "text" : "During our research we tried to analyse the images through different aspects. One that appeared to be interesting for us was the shapes we can find in the the images. It seemed that there were more circles in the girl images. We tried to analyse this with a Python Library called OpenCV. The first step was to convert the image to grayscale, in order to detect the edges. In order to do that we used the Canny algorithm, available in the OpenCV library. It is one of the most popular algorithm for edge detection, it was used one many tutorial for shape detections we found online such as: <a href='https://www.thepythoncode.com/article/detect-shapes-hough-transform-opencv-python'>this one</a>. We played on two parameters from the Canny algorithm: threshold1 and threshold2. They delineate how precisely we detect the edges. Because we wanted to detect only global shaped in the image and not small details, it was important to keep the two parameters close from another at a certain level. Then we used blur filter to erase remaining details we didn't to take into account. Finally to detecgt shapes we used Hough transforms. We didn't dig into the theoritical details but it is a popular tool to detect shapes. But basically the Hough transform tries to associate any points of the image to type of shape and for each shape build an accumulator which increase with the number of points belonging to the shape. If the accumulator is big enoough than the shape is detected. In our case we tried to detect straight lines and circles. For the circles we choosed minimal and maximal radius to detect interessant circles. We had to choose empirically the accumulator's value. If it was too big we couldn't detect anything and if it was too small we detected every little thing in the image. We did the same for the lines. <br> <br> We tried our detection on several images but unfortunately the result was not great. You can see some examples aside. The shapes we wanted to detect were not precise enough for shape detection. We wanted more to detect the idea of a shape than the shape itself. And as we didn't konw anything about image analysis or shape detection it was to hard for us to learn this subject for this study.",
    "images" : [
      "data/img/shape1.jpeg",
      "data/img/shape2.jpeg",
      "data/img/shape3.jpeg"
    ]
  },
  {
    "tabname" : "Toys Classifier",
    "text" : "This experimentation had the benefit to give us a funny though: what if the toys images were so gendered, that a computer could guess if they belong to the boy or the girl category? That's why we decided to build an artificial intelligence trained on our database able to classify toys in two categories: boy or girl. We had many ways to build such classifier, but we choose to focus on the images. Indeed the toys images are, according to us, where we can see better the difference between boy and girl categories. <br> <br> We worked again exclusively on Python for this part. The initial difficulty we faced was the huge amount of data. The images were almost all 575*575 images, and we had 75.000 of them. We tried at the beginning to load them all on Python but in order to do that we had to reduce a lot the quality of the images and use a very simple classifier. Second, we decided to store them locally and use generators to work with them. The images were initially stored into three folders: 'Boy', 'Girl' and 'Mixt'. We decided to only train our classifier on the 'Boy' and 'Girl' repositories. The first step was to resize the images because a lot of them did not have the same shape and we still had to reduce their quality. We did it locally, in order to have a functionnal local respository to work with. We used the PIL.image library to load and resize images. We used 400*400*3 as a size for our images. <br><br> For our first try we separated data into train and validation set. The aime was to check the accuracy of our classifier on our daatset in real time. It allows a better final accuracy. For the second try, as the model we used was much more complex, we decided to only have a train set, otherwise the training time was too long. As we used images with a large size we opted for a Convolutional Neural Network as a model. In term of complexity it was the only reasonnable choice to make. The first model we build was really simple, with one convolutional hidden layer and a kernel size of 3. The training and validation accuracies were really great, and as you can see on the first plot we managed to avoid over and under fitting. But we were not convinced. As we tried to classify the toys from the Mixt category we found poorely classified toys from the boy and girl categories that happen to be in the mixt category too. Our model was too simple. That is why we began to look at transfer learning. The princip is to used an already trained algorithm and only change the last layers to adjust their weights to our dataset. Wa had to choose a model alreadytrained for image classification. Thus the training and learning wouldn't begin to zero. We choosed MobileNet because it is a light model, trained for image classification, which lies a lot on color. As our training set is heavy, and regarding the importance of color in our data, ti was a good choice for us. You can see the evolution of the training accuracy on the right. <br> <br> The lack of testing dataset was a real problem in our work because we had no way to really test if or models were good. The original idea was to scrap another catalog but we did not have the time. Another issue was the time consuming algorithm. It would have been great to test other models, to increase the complexity or to try data augmentation. But because our models traines for 10 hours, sometimes more, we couldn't experiment more thant that. <br> <br> To share our work we decided to build a little toy classifier on our model. You can test it with your own images or use the available ones. The classifier returns the prediction of our model. The model was stored into a .h5 file and we load it on a python server. We pass the image from our server to the python server thanks to a socket. The classifier can manage several images submition but not at the same time. The computation can take some time. The uploaded image can't be to big.",
    "images" : [
      "data/img/model1.png",
      "data/img/modelarchi.png",
      "data/img/model2.png"
    ]
  }
]
